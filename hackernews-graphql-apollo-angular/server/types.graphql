# ---------------------------------------------------------------------
# types.graphql - 
# This file defines all graphql-schemas of the forge-hackernews
# applications graphcool graphql backend-service
#
# CAUTION!
# The description for the defined graphql schema-type and 
# their properties are found in 'types.ts'-file in 
# 'client/src/app/'-directory, so they are available in the
# applications documentation
# ---------------------------------------------------------------------

# ----------------------- Example (Start) -----------------------------
# The following types define the data model of the example service
# based on which the GraphQL API is generated

# type User @model {
#   id: ID! @isUnique
#   name: String
#   dateOfBirth: DateTime

#   # Uncomment below - you can declare relations between models like this

#   # posts: [Post!]! @relation(name: "UserPosts")
# }

# Uncomment the model below as well

# type Post @model {
#   id: ID! @isUnique
#   title: String!
#
#   # Every relation also required a back-relation (to determine 1:1, 1:n or n:m)
#   author: User! @relation(name: "UserPosts")
# }
# -----------------------Example (End) -----------------------------

type Link @model {
  # Required system field:
  id: ID! @isUnique # read-only (managed by Graphcool)
  # Optional system fields (remove if not needed):
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (managed by Graphcool)
  # Member non-system fields
  description: String!
  url: String! @isUnique
  voteCount: Int! @migrationValue(value: 0)
  commentCount: Int!
  # Type relation fields
  # CAUTION! 1-N RELATION
  # An instance of Link can be submitted
  # exactly by a single user, but a single user
  # can submit multiple links.
  postedBy: User @relation(name: "UserLinks")
  votes: [Vote!]! @relation(name: "VotesOnLink")
  comments: [Comment!]! @relation(name: "CommentOnLink" )
}

# added by email-password template: (please uncomment)
type User @model {
  # Required system field:
  id: ID! @isUnique # read-only (managed by Graphcool)
  # Optional system fields (remove if not needed):
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (managed by Graphcool)
  # Member non-system fields
  name: String! @isUnique
  email: String! @isUnique  
  password: String!
  # Type relation fields
  links: [Link!]! @relation(name: "UserLinks")
  votes: [Vote!]! @relation(name: "UsersVotes")
  comments: [Comment!]! @relation(name: "CommentAutor")
  commentVotes: [CommentVote!]! @relation(name: "UsersCommentVotes")
}

type Vote @model {
  # Required system field:
  id: ID! @isUnique # read-only (managed by Graphcool)
  # Optional system fields (remove if not needed):
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (man
  # Type relation fields
  user: User! @relation(name: "UsersVotes")
  link: Link! @relation(name: "VotesOnLink")
}

type Comment @model {
  # Required system field:
  id: ID! @isUnique # read-only (managed by Graphcool)
  # Optional system fields (remove if not needed):
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (man
  # Member non-system fields
  message: String!
  depth: Int!
  # Type relation fields
  link: Link! @relation(name: "CommentOnLink")
  user: User! @relation(name: "CommentAutor")
  votes: [CommentVote!]! @relation(name: "VoteOnComment")
  # CAUTION! SELF-REFERENCE
  # This is an example of a self-reference on 
  # comment so a comment can also receive comments as a responses
  parent: Comment @relation(name: "CommentResponse")
  responses: [Comment!]! @relation(name: "CommentResponses")
}

type CommentVote @model {
  # Required system field:
  id: ID! @isUnique # read-only (managed by Graphcool)
  # Optional system fields (remove if not needed):
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (man
  # Type relation fields
  user: User! @relation(name: "UsersCommentVotes")
  comment: Comment! @relation(name: "VoteOnComment")
}