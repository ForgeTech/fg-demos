#######################################################################
# types.graphql - 
# This file defines all graphql-schemas of the forge-hackernews
# applications graphcool graphql backend-service
#
# CAUTION!
# The description for the defined graphql schema-type and 
# their properties are found in 'types.ts'-file in 
# 'client/src/app/'-directory, so they are available in the
# applications documentation
#######################################################################

# ####################### Example (Start) #############################
# The following types define the data model of the example service
# based on which the GraphQL API is generated

# type User @model {
#   id: ID! @isUnique
#   name: String
#   dateOfBirth: DateTime

#   # Uncomment below - you can declare relations between models like this

#   # posts: [Post!]! @relation(name: "UserPosts")
# }

# Uncomment the model below as well

# type Post @model {
#   id: ID! @isUnique
#   title: String!
#
#   # Every relation also required a back-relation (to determine 1:1, 1:n or n:m)
#   author: User! @relation(name: "UserPosts")
# }
# ####################### Example (Start) ###############################

type Link @model {
  # Required system field
  id: ID! @isUnique # read-only (managed by Graphcool)
  # Optional system fields (remove if not needed):
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (managed by Graphcool)
  # Member non-system fields
  description: String!
  url: String! @isUnique
  voteCount: Int! @migrationValue(value: 0)
  commentCount: Int!
  # Type relation fields
  # CAUTION! 1-N RELATION
  # An instance of Link can be submitted
  # exactly by a single user, but a single user
  # can submit multiple links.
  postedBy: User @relation(name: "UserLinks")
  votes: [Vote!]! @relation(name: "VotesOnLink")
  comments: [Comment!]! @relation(name: "CommentOnLink" )
}

# added by email-password template: (please uncomment)
type User @model {
  # Required system field
  id: ID! @isUnique # read-only (managed by Graphcool)
  # Optional system fields (remove if not needed):
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (managed by Graphcool)
  # Member non-system fields
  name: String! @isUnique
  email: String! @isUnique  
  password: String!
  # Type relation fields
  links: [Link!]! @relation(name: "UserLinks")
  votes: [Vote!]! @relation(name: "UsersVotes")
  comments: [Comment!]! @relation(name: "CommentAutor")
  commentVotes: [CommentVote!]! @relation(name: "UsersCommentVotes")
}

type Vote @model {
  # Required system field
  id: ID! @isUnique # read-only (managed by Graphcool)
  # Optional system fields (remove if not needed):
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (man
  # Type relation fields
  user: User! @relation(name: "UsersVotes")
  link: Link! @relation(name: "VotesOnLink")
}

type Comment @model {
  # Required system field
  id: ID! @isUnique # read-only (managed by Graphcool)
  # Optional system fields (remove if not needed):
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (man
  # Member non-system fields
  message: String!
  depth: Int!
  # Type relation fields
  link: Link! @relation(name: "CommentOnLink")
  user: User! @relation(name: "CommentAutor")
  votes: [CommentVote!]! @relation(name: "VoteOnComment")
  # CAUTION! SELF-REFERENCE
  # This is an example of a self-reference on 
  # comment so a comment can also receive comments as a responses
  parent: Comment @relation(name: "CommentResponse")
  responses: [Comment!]! @relation(name: "CommentResponses")
}

type CommentVote @model {
  # Required system field
  id: ID! @isUnique # read-only (managed by Graphcool)
  # Optional system fields (remove if not needed):
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (man
  # Type relation fields
  user: User! @relation(name: "UsersCommentVotes")
  comment: Comment! @relation(name: "VoteOnComment")
}

##################################################################################
# The following types are meant for Prototyping of the for now named 
# FORGE -DESIGN, DEVELOPMENT AND PROTOYPING TOOLS
##################################################################################

# Type to represent all possible kinds of content that can be used
# within the application
type Content @model {
  # Required system field
  id: ID! @isUnique # read-only (managed by Graphcool)
  # Optional system fields (remove if not needed):
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (managed by Graphcool)
  ################################################################################
  # A human readable shorthand to easier identify
  name: String
  # Should contain all content-types that can be
  # character encoded, like text, json, html...
  payload: String
  imageRef: String # Should later be of type image
  audioRef: String # Should later be of type audio
  videoRef: String # Should later be of type video
  # Should contain the top-level type of content
  # like text, json, html, image, audio, video...
  type: String
}

# A Component is a partial user-interface element, typically
# made up from layouts, layers and other components, providing
# some sort of reuseable functionality to the application,
# for example a text-field for presenting, altering and editing
# of text
type Component @model {
  # Required system field
  id: ID! @isUnique # read-only (managed by Graphcool)
  # Optional system fields (remove if not needed):
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (managed by Graphcool)
  # Member non-system fields
  name: String!
}

# A Position is used as placeholder while structuring
# the available screen-space - like dividing a view 
# into header-, content- and footer-area - and later
# hold the component making-up the user-interface
type Position @model {
  # Required system field
  id: ID! @isUnique # read-only (managed by Graphcool)
  # Optional system fields (remove if not needed):
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (managed by Graphcool)
}

# A Layout is used to organize the x-/y-axis of a view,
# and structure it by defining positions for holding
# user-interface elements
type Layout @model {
  # Required system field
  id: ID! @isUnique # read-only (managed by Graphcool)
  # Optional system fields (remove if not needed):
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (managed by Graphcool)
  # Member non-system fields
  
}

# A Layer is to stack multiple
# layouts, and organize the depth 
# or z-axis of the user-interface
type Layer @model {
  # Required system field
  id: ID! @isUnique # read-only (managed by Graphcool)
  # Optional system fields (remove if not needed):
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (managed by Graphcool)
  # Member non-system fields
}

# A State should be used to adapt and modify a user-interface
# when matching certain conditions - for example user-interactions 
# or changes to width/height of the browser window
type State @model {
  # Required system field
  id: ID! @isUnique # read-only (managed by Graphcool)
  # Optional system fields (remove if not needed):
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (managed by Graphcool)
  # Member non-system fields
  
}

# A View should bundle a set of user-interface elements
# to allow a user to perform a designated task - like
# reading the desired information or calculating the
# sum of two values ...
type View @model {
  # Required system field
  id: ID! @isUnique # read-only (managed by Graphcool)
  # Optional system fields (remove if not needed):
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (managed by Graphcool)
  # Member non-system fields
  
}

# An Export defines a set of instructions and requirements
# used to prepare the modeled views of a project for there
# runtime
type Exports @model {
  # Required system field
  id: ID! @isUnique # read-only (managed by Graphcool)
  # Optional system fields (remove if not needed):
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (managed by Graphcool)
  # Member non-system fields
  
}

type Project @model {
  # Required system field
  id: ID! @isUnique # read-only (managed by Graphcool)
  # Optional system fields (remove if not needed):
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (managed by Graphcool)
  # Member non-system fields
  
}



